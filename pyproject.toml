[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools",
]

[project]
authors = [
    {name = "Erkan Özgür Yılmaz", email = "eoyilmaz@gmail.com"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: MacOS X",
    "Environment :: Win32 (MS Windows)",
    "Environment :: X11 Applications",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Printing",
]
description = "An addon for Klipper to manage/utilize Prusa MMU3 device."
dynamic = ["version", "dependencies"]
license = "MIT License"
maintainers = [
    {name = "Erkan Özgür Yılmaz", email = "eoyilmaz@gmail.com"},
]
name = "klipper-mmu3"
readme = "README.md"
requires-python = ">= 3.9"

[project.urls]
"Home Page" = "https://github.com/eoyilmaz/klipper-configs"
GitHub = "https://github.com/eoyilmaz/klipper-configs"
Repository = "https://github.com/eoyilmaz/klipper-configs.git"
Download = "https://github.com/eoyilmaz/klipper-configs/releases/"

[tool.distutils.bdist_rpm]
doc-files = "LICENSE.txt README.md"
fix-python = 1
packager = "Erkan Ozgur Yilmaz <eoyilmaz@gmail.com>"
# post-install = "util/rpm_postinstall.sh"
# post-uninstall = "util/rpm_postuninstall.sh"
release = 1
# keep_temp = 1

[tool.distutils.bdist_wheel]
universal = 0

[tool.distutils.install]
record = "INSTALLED_FILES"

[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
where = ["./"]

# [tool.setuptools.package-data]

# [tool.setuptools.exclude-package-data]

[tool.setuptools.dynamic]
# dependencies = { file = ["requirements.txt"] }
# optional-dependencies.test = { file = ["requirements-dev.txt"] }
version = { file = ["VERSION"] }

[tool.black]
line-length = 88

[tool.flake8]
exclude = [
    ".github",
    "__pycache__",
    ".coverage",
    ".DS_Store",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "build",
    "cacert.pem",
    "*.egg-info",
    "dist",
    "docs",
    "INSTALLED_FILES",
    "MANIFEST.in",
    "misc",
    "test_dir",
    "tests",
    "tests/data/icc",
    "VERSION",
]
extend-select = ["B950"]
ignore = ["D107", "E203", "E501", "E701", "SC200", "W503"]
max-complexity = 12
max-line-length = 80
per-file-ignores = []

[tool.ruff.lint]
select = [
    "A",  # flake8-builtins
    "ANN",  # flake-annotations
    "ASYNC",  # flake-async
    "B",  # flake8-bugbear
    "C",  # McCabe complexity
    "C4",  # flake8-comprehensions
    "COM",  # flake8-commas
    "D",  # pydocstyle
    "E",  # pycodestyle
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
    "FLY",  # flynt
    "I",  # isort
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "N",  # PEP8 Naming
    "NPY",  # NumPy-specific rules
    "PERF",  # perflint
    "PIE",  # flake8-pie
    "PLR",  # Pylint - Refactor
    "PYI",  # flake8-pyi
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific-rules
    "Q",  # flake8-quotes
    "S",  # flake-bandit
    "SIM",  # flake8-simplify
    "SLOT",  # flake8-slots
    "T10",  # flake8-debugger
    "TC",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",  # pyupgrade
    "YTT",  # flake-2020

]
extend-ignore = [
    "ANN002",  # missing type annotations args
    "ANN003",  # missing type annotations kwargs
    "COM812",  # flake8-commas
    "D104",  # Missing docstring in in publish package
    "D107",  # skip docstring for __init__
    "D203",  # Incorrect blank line before class
    "D209",  # New line after last paragraph in docstring
    "D213",  # Multiline docstring summary second line
    "D412",  # Bland line between header and content
    "D416",  # Missing section name colon
    "E741",  # Ambiguous variable name
    "E402",  # Module level import not at top of file
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0914",  # Too many local variables
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value comparison
    "PERF203",  # Try..except in loop, TODO: Re-enable this later on...
    "RUF100",  # Unused noqa
    "S105",  # Hardcoded password
    "S110",  # try..except..pass
    "S603",  # Subprocess without shell=True
]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
pythonpath = [
    ".",
]

[tool.tox]
requires = ["tox>=4.23.2"]
env_list = ["3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.tox.env_run_base]
description = "run the tests with pytest"
package = "wheel"
wheel_build_env = ".pkg"
deps = [
    "pytest>=6",
    "pytest-cov",
    "pytest-xdist",
]
commands = [
    ["pytest"],
]

[tool.mypy]
